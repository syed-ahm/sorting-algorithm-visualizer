{"version":3,"sources":["components/TopBar.js","App.js","index.js"],"names":["TopBar","props","handleChange","e","preventDefault","algoCheck","data","myRef","current","value","quickSort","length","bubbleSort","React","createRef","className","onSubmit","this","ref","Button","onClick","type","id","stopSort","regen","Component","App","continueSorting","state","nodes","numNodes","algorithm","renderRef","p5","p","setup","createCanvas","parent","i","Math","floor","random","draw","lineHeight","background","stroke","line","window","screen","height","swap","bind","dataLength","isSorted","start","end","partition","index","pivotIndex","pivotValue","array","a","b","sleep","tempVal","setState","ms","Promise","resolve","setTimeout","array1","array2","console","log","Fragment","updateParentAlgo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8801985a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\n\r\n\r\nclass TopBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.myRef = React.createRef();\r\n    }\r\n    \r\n    // // handles form submission by using updateParent() to change Parent component state\r\n    handleChange = e => {\r\n        e.preventDefault();\r\n    }\r\n\r\n    // runs corresponding sorting algorithm from App.js\r\n\r\n\r\n    algoCheck = () => {\r\n        let data = [...this.props.data];\r\n        switch (this.myRef.current.value) {\r\n            case \"1\":\r\n                this.props.quickSort(data, 0, data.length - 1);\r\n                break;\r\n            case \"2\":\r\n                this.props.bubbleSort(); \r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        \r\n        return(\r\n            \r\n            <div className = \"bg-primary navbar topBar\"> \r\n                <h3>Sorting Algorithms Visualizer</h3>\r\n                <form className = \"d-flex justify-content-center\" onSubmit = {this.handleChange}>\r\n                    <select ref = {this.myRef} className = \"custom-select mySelect\">\r\n                        <option value = \"0\">Choose an Algorithm</option>\r\n                        <option value = \"1\">Quick Sort</option>\r\n                        <option value = \"2\">Bubble Sort</option>\r\n                    </select>\r\n                    <Button onClick = {this.algoCheck} type=\"submit\" className = \"btn-success myButton\" id=\"visBtn\">Visualize!</Button>\r\n                </form>\r\n                <Button onClick = {this.props.stopSort} className = \"btn-secondary myButton\" id = \"stopSortBtn\">Stop Sorting</Button>\r\n                <Button onClick = {this.props.regen} className = \"btn-secondary myButton\">Regenerate Array</Button>\r\n            </div>\r\n            \r\n        );\r\n        \r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default TopBar;","import React from 'react';\nimport TopBar from './components/TopBar';\nimport p5 from 'p5';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './main.css';\n\n\nclass App extends React.Component {\n  // nodes stores line information, algorithm stores type of algorithm selected from dropdown \n  constructor() {\n    super();\n\n    this.state = {\n      nodes : [],\n      numNodes: 1600,\n      algorithm : \"0\"\n    };\n\n    this.renderRef = React.createRef();\n    this.continueSorting = true;\n\n    // p5 sketch\n    this.data = new p5(p => {    \n        p.setup = () => {\n            p.createCanvas(1600,560).parent(this.renderRef.current);\n            \n            // assign random values to nodes array for data lines\n            for (let i = 0; i < this.state.numNodes; i++) {\n              this.state.nodes[i] = (  (Math.floor(Math.random() * 1000) )  );\n            }\n              \n        };\n    \n        p.draw = () => {\n            let lineHeight;\n            p.background(255);\n\n            for (let i = 0; i < this.state.numNodes; i++) {\n              lineHeight = this.state.nodes[i];\n              p.stroke(0);\n              p.line(i, window.screen.height, i, window.screen.height - lineHeight);\n            }\n        };\n    });\n\n    this.swap = this.swap.bind(this);\n    this.bubbleSort = this.bubbleSort.bind(this);\n    this.quickSort = this.quickSort.bind(this);\n  }\n\n\n  // BUBBLE SORT //\n\n\n  async bubbleSort() {\n    this.continueSorting = true;\n    let data = [...this.state.nodes];\n    let dataLength = data.length - 1;\n    let isSorted = false;\n  \n    while(!isSorted) {\n      isSorted = true;\n\n      while (this.continueSorting) {\n        for (let i = 0; i < dataLength; i++) {\n          if (data[i] > data[i + 1]) {\n            await this.swap(data, i, i + 1);\n            isSorted = false;\n          }\n        }\n      }\n      dataLength--; \n    }\n  }\n\n\n\n\n  // QUICK SORT //\n\n  async quickSort(data, start, end) {\n\n    if (start >= end) {\n      return data;\n    }\n\n    let index = await this.partition(data, start, end);\n\n    this.quickSort(data, start, index-1);\n    this.quickSort(data, index + 1, end);\n\n  }\n\n  async partition(data, start, end) {\n    let pivotIndex = start;\n    let pivotValue = data[end];\n\n    for (let i = start; i < end; i++) {\n      if (data[i] < pivotValue) {\n        this.swap(data, i, pivotIndex);\n        pivotIndex++;\n      }\n    }\n\n    await this.swap(data, pivotIndex, end);\n\n    return pivotIndex;\n  }\n\n\n\n\n\n  // ULTILITY FUNCTIONS //\n\n  // stops sorting function\n  stopSort = () => {\n    this.continueSorting = false;\n  }\n\n\n  // swaps \n  async swap(array, a, b) {\n    await this.sleep(1);\n    let tempVal;\n\n    tempVal = array[a];\n    array[a] = array[b];\n    array[b] = tempVal;\n\n    this.setState({\n      nodes: array\n    });\n  }\n\n  // pauses algoirthm in order to show visualization\n  async sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  // testing array equality\n  equal(array1, array2) {\n    if (array1.length !== array2.length) return false;\n    for (let i = 0; i < array1.length; i++) {\n      if (array1[i] !== array2[i]) {\n        return false;\n      }\n    } \n\n    console.log(array1);\n    console.log(array2);\n    return true;\n\n    // create javascript sorted array\n    // let data1 = this.state.nodes.slice().sort( (a, b) => a - b);\n  } \n\n\n\n  render() {\n\n    return (\n      <React.Fragment>\n        <TopBar algorithm = {this.state.algorithm} updateParentAlgo = {this.updateParentAlgo} regen = {this.data.setup} bubbleSort = {this.bubbleSort} quickSort = {this.quickSort} stopSort = {this.stopSort} data = {this.state.nodes}/>\n        <div className = \"d-flex justify-content-center\" id=\"renderWrapper\">\n          <div id=\"renderDiv\" ref={this.renderRef}></div>\n        </div>\n      </React.Fragment> \n    );\n  }\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <App />, document.getElementById('root')\n);\n\n"],"sourceRoot":""}